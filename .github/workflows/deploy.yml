name: Deploy to AWS App Runner

on:
  push:
    branches:
      - master

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0 # Asegúrate de que coincida con la versión de .NET Core que usas en tu proyecto

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test Prueba.Tests/Prueba.Tests.csproj --no-restore --verbosity normal

  deploy:
    name: Build and Deploy to AWS App Runner
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Amazon ECR
      id: ecr-login
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

    - name: Define IMAGE_TAG
      id: define-tag
      run: echo "IMAGE_TAG=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
      shell: bash

    - name: Debug IMAGE_TAG
      run: echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"
      shell: bash

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }} .
        docker tag ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }} ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Update App Runner Service
      run: |
        aws apprunner update-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
          --source-configuration ImageRepository='{ImageIdentifier=${{ secrets.ECR_REPOSITORY_URI }}:latest,ImageRepositoryType=ECR}'

